{
	"info": {
		"_postman_id": "3d606892-4e8e-4f48-9fc1-f5e88d707011",
		"name": "Respond.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27114319"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test the response content type\r",
							"pm.test(\"Response has content type of application/json\", function () {\r",
							"    pm.expect(pm.response).to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within the acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Data object should contain idToken property\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('object');\r",
							"    pm.expect(responseData.data.idToken).to.exist;\r",
							"});\r",
							"\r",
							"// Save idToken from response to the collection variable\r",
							"pm.test(\"Save idToken to collection variable\", function () {\r",
							"    var idToken = pm.response.json().data.idToken;\r",
							"    pm.collectionVariables.set(\"idToken\", idToken);\r",
							"});\r",
							"\r",
							"// Test for status and message from the response\r",
							"pm.test(\"Response contains status and message properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							"\r",
							"// Test for status and message from the response to have specific values\r",
							"pm.test(\"Status should be 'success' and message should be 'login successful'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.status).to.equal('success');\r",
							"    pm.expect(responseData.message).to.equal('Login successful');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "accept-language",
						"value": "en-US,en;q=0.9"
					},
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "origin",
						"value": "https://app.respond.io"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://app.respond.io/auth/login",
					"protocol": "https",
					"host": [
						"app",
						"respond",
						"io"
					],
					"path": [
						"auth",
						"login"
					]
				},
				"description": "Generated from cURL"
			},
			"response": []
		},
		{
			"name": "Organizations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response has content type of application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"organizationId\", jsonData.data[0].id);\r",
							"\r",
							"\r",
							"pm.test(\"Response has data with 'name' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.data.forEach(function(organization) {\r",
							"        pm.expect(organization).to.have.property('name');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "accept-language",
						"value": "en-US,en;q=0.9"
					},
					{
						"key": "authorization",
						"value": "Bearer {{idToken}}"
					}
				],
				"url": {
					"raw": "https://app.respond.io/auth/user/organizations",
					"protocol": "https",
					"host": [
						"app",
						"respond",
						"io"
					],
					"path": [
						"auth",
						"user",
						"organizations"
					]
				},
				"description": "Generated from cURL"
			},
			"response": []
		},
		{
			"name": "Spaces",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - status, message, data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"    pm.expect(responseData.data).to.exist;\r",
							"});\r",
							"\r",
							"// Test to check for status and message values\r",
							"pm.test(\"Status and message have values\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.status).to.equal(\"success\");\r",
							"    pm.expect(responseData.message).to.equal(\"success\");\r",
							"});\r",
							"\r",
							"//Saving only first workspace ID and name into collection variable\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"firstWorkSpaceID\", jsonData.data.items[0].id);\r",
							"pm.collectionVariables.set(\"firstWorkSpaceName\", jsonData.data.items[0].name);\r",
							"\r",
							"// Test to check if the response contains specific values\r",
							"pm.test(\"Response contains specific values\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  const firstItem = responseData.data.items[0];\r",
							"\r",
							"  pm.expect(firstItem.id).to.exist.and.to.be.a('number');\r",
							"  pm.expect(firstItem.name).to.exist.and.to.be.a('string').and.to.equal(pm.collectionVariables.get('firstWorkSpaceName'));\r",
							"  pm.expect(firstItem.lang).to.exist.and.to.be.a('string').and.to.equal('en');\r",
							"  pm.expect(firstItem.status).to.exist.and.to.be.a('boolean').and.to.equal(true);\r",
							"  pm.expect(firstItem.isAway).to.exist.and.to.be.a('boolean');\r",
							"  pm.expect(firstItem.usersInactiveAfter).to.exist.and.to.be.a('number');\r",
							"  pm.expect(firstItem.contactAllowed).to.be.null;\r",
							"  pm.expect(firstItem.__meta).to.exist.and.to.be.an('object');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "accept-language",
						"value": "en-US,en;q=0.9"
					},
					{
						"key": "authorization",
						"value": "Bearer {{idToken}}"
					},
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "orgid",
						"value": "{{organizationId}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"search\": \"\",\r\n    \"pagination\": {\r\n        \"page\": 1,\r\n        \"itemsPerPage\": 25,\r\n        \"sortBy\": [\r\n            \"name\"\r\n        ],\r\n        \"descending\": [\r\n            false\r\n        ],\r\n        \"rowsPerPage\": 25\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://app.respond.io/api/organization/:orgID/spaces",
					"protocol": "https",
					"host": [
						"app",
						"respond",
						"io"
					],
					"path": [
						"api",
						"organization",
						":orgID",
						"spaces"
					],
					"variable": [
						{
							"key": "orgID",
							"value": "{{organizationId}}"
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Delete Workspace",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - status and message with valid values\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist.and.to.equal('success');\r",
							"    pm.expect(responseData.message).to.exist.and.to.equal('Deleted Successful.');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "accept-language",
						"value": "en-US,en;q=0.9"
					},
					{
						"key": "authorization",
						"value": "Bearer {{idToken}}"
					},
					{
						"key": "orgid",
						"value": "{{organizationId}}"
					}
				],
				"url": {
					"raw": "https://app.respond.io/api/organization/:orgID/spaces/:workspaceID",
					"protocol": "https",
					"host": [
						"app",
						"respond",
						"io"
					],
					"path": [
						"api",
						"organization",
						":orgID",
						"spaces",
						":workspaceID"
					],
					"variable": [
						{
							"key": "orgID",
							"value": "{{organizationId}}"
						},
						{
							"key": "workspaceID",
							"value": "{{firstWorkSpaceID}}"
						}
					]
				},
				"description": "Generated from cURL:"
			},
			"response": []
		},
		{
			"name": "Add Workspace",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - status, message, data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"    pm.expect(responseData.data).to.exist;\r",
							"});\r",
							"\r",
							"// Test to check for status and message values\r",
							"pm.test(\"Status and message have values\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.status).to.equal(\"success\");\r",
							"    pm.expect(responseData.message).to.equal(\"Workspace added Successfully.\");\r",
							"});\r",
							"\r",
							"//Saving workspace ID into collection variable\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"firstWorkSpaceID\", jsonData.data.id);\r",
							"\r",
							"pm.test(\"Bundle object is present and contains expected properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"    pm.expect(responseData.data).to.have.property('bundle');\r",
							"    pm.expect(responseData.data.bundle).to.have.property('onboarding');\r",
							"    pm.expect(responseData.data.bundle).to.have.property('lifecycleEnabled');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Onboarding object contains the expected properties and values\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.data.bundle.onboarding).to.be.an('object');\r",
							"    pm.expect(responseData.data.bundle.onboarding).to.have.property('isOnboardingDismissed').that.is.a('boolean');\r",
							"    pm.expect(responseData.data.bundle.onboarding).to.have.property('primaryChannels').that.is.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Data object contains expected properties and some important values\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.have.property('isAway');\r",
							"    pm.expect(responseData.data).to.have.property('isEnabled');\r",
							"    pm.expect(responseData.data).to.have.property('usersInactiveAfter');\r",
							"    pm.expect(responseData.data).to.have.property('id');\r",
							"    pm.expect(responseData.data).to.have.property('name').and.to.equal(pm.collectionVariables.get('firstWorkSpaceName'));\r",
							"    pm.expect(responseData.data).to.have.property('status').and.to.equal(true);\r",
							"    pm.expect(responseData.data).to.have.property('lang').and.to.equal('en');\r",
							"    pm.expect(responseData.data).to.have.property('orgId').and.to.equal(pm.collectionVariables.get('organizationId'));\r",
							"    pm.expect(responseData.data).to.have.property('timezone').and.to.equal('Asia/Karachi');\r",
							"    pm.expect(responseData.data).to.have.property('updated_at');\r",
							"    pm.expect(responseData.data).to.have.property('created_at');\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "accept-language",
						"value": "en-US,en;q=0.9"
					},
					{
						"key": "authorization",
						"value": "Bearer {{idToken}}"
					},
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "orgid",
						"value": "{{organizationId}}"
					},
					{
						"key": "origin",
						"value": "https://app.respond.io",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{firstWorkSpaceName}}\",\r\n    \"timezone\": \"Asia/Karachi\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://app.respond.io/api/organization/:orgID/spaces/create",
					"protocol": "https",
					"host": [
						"app",
						"respond",
						"io"
					],
					"path": [
						"api",
						"organization",
						":orgID",
						"spaces",
						"create"
					],
					"variable": [
						{
							"key": "orgID",
							"value": "{{organizationId}}"
						}
					]
				},
				"description": "Generated from cURL"
			},
			"response": []
		},
		{
			"name": "Add User to Workspace",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - status and message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status and message fields should exist and be of type string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.be.a('string').and.to.equal('success');\r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.equal('Users added to workspace Successfully.');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "accept-language",
						"value": "en-US,en;q=0.9"
					},
					{
						"key": "authorization",
						"value": "Bearer {{idToken}}"
					},
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "orgid",
						"value": "{{organizationId}}"
					},
					{
						"key": "origin",
						"value": "https://app.respond.io"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"spaceId\": {{firstWorkSpaceID}},\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{email2}}\",\r\n            \"role\": \"owner\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://app.respond.io/api/organization/{{organizationId}}/spaces/users",
					"protocol": "https",
					"host": [
						"app",
						"respond",
						"io"
					],
					"path": [
						"api",
						"organization",
						"{{organizationId}}",
						"spaces",
						"users"
					]
				},
				"description": "Generated from cURL"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "email",
			"value": "syedmuhammadali1337@gmail.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "",
			"type": "string"
		},
		{
			"key": "idToken",
			"value": ""
		},
		{
			"key": "firstWorkSpaceID",
			"value": ""
		},
		{
			"key": "firstWorkSpaceName",
			"value": ""
		},
		{
			"key": "organizationId",
			"value": ""
		},
		{
			"key": "email2",
			"value": "syedmuhammadali1337@gmail.com",
			"type": "string"
		}
	]
}